rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // SECURITY FUNCTIONS - Reusable validation and authentication logic
    // ============================================================================
    
    /**
     * Validates that user is authenticated
     */
    function isAuthenticated() {
      return request.auth != null;
    }
    
    /**
     * Validates that the authenticated user matches the userId in the path
     */
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    /**
     * Check if user has granted specific privacy permission
     * In production, this would check user's privacy settings
     */
    function hasPrivacyPermission(userId, permission) {
      return isOwner(userId);
      // TODO: Implement actual privacy settings check when user preferences are loaded
      // return isOwner(userId) && 
      //        get(/databases/$(database)/documents/users/$(userId)/preferences/privacy).data[permission] == true;
    }
    
    /**
     * Validates that user is part of authorized users list for shared resources
     * Used in shared relationship contexts where multiple users have access
     */
    function isAuthorizedUser(authorizedUsers) {
      return isAuthenticated() && request.auth.uid in authorizedUsers;
    }
    
    /**
     * Validates required fields for person documents
     */
    function isValidPersonData() {
      let data = request.resource.data;
      return data.keys().hasAll(['displayName', 'roles', 'createdAt', 'lastUpdated']) &&
             data.displayName is string &&
             data.displayName.size() >= 1 &&
             data.displayName.size() <= 100 &&
             data.roles is list &&
             data.roles.size() >= 1 &&
             data.createdAt is timestamp &&
             data.lastUpdated is timestamp;
    }
    
    /**
     * Validates required fields for interaction documents
     */
    function isValidInteractionData() {
      let data = request.resource.data;
      return data.keys().hasAll(['personId', 'timestamp', 'type']) &&
             data.personId is string &&
             data.timestamp is timestamp &&
             data.type is string &&
             data.type in ['conversation', 'meeting', 'call', 'message', 'event', 'other'];
    }
    
    /**
     * Validates required fields for prompt documents
     */
    function isValidPromptData() {
      let data = request.resource.data;
      return data.keys().hasAll(['personId', 'type', 'createdAt', 'urgency']) &&
             data.personId is string &&
             data.type is string &&
             data.type in ['check_in', 'birthday', 'follow_up', 'support', 'celebrate', 'reconnect'] &&
             data.createdAt is timestamp &&
             data.urgency is string &&
             data.urgency in ['low', 'medium', 'high'];
    }
    
    /**
     * Validates that document size doesn't exceed limits (Firebase has 1MB limit, we set 500KB)
     */
    function isValidDocumentSize() {
      return request.resource.size < 500000; // 500KB limit
    }
    
    /**
     * Rate limiting: Ensures user doesn't exceed write operations per hour
     * Note: This is a simplified check. Production should use Cloud Functions for proper rate limiting
     */
    function isWithinWriteRateLimit() {
      // Allow up to 100 writes per hour per collection per user
      // This is a basic check - real rate limiting should be implemented in Cloud Functions
      return true; // Placeholder for now
    }

    // ============================================================================
    // USER PROFILE DOCUMENTS - Individual user settings and preferences  
    // ============================================================================
    
    match /users/{userId} {
      // User can read and write their own profile
      allow read, write: if isOwner(userId) && 
                         isValidDocumentSize();
      
      // Additional validation for writes
      allow write: if isOwner(userId) && 
                   isValidDocumentSize() &&
                   isWithinWriteRateLimit();
      
      /**
       * User preferences and settings - fully private to user
       */
      match /preferences/{document=**} {
        allow read, write: if isOwner(userId) && 
                           isValidDocumentSize();
      }
      
      /**
       * Privacy settings - GDPR compliance
       */
      match /privacy_settings/{settingId} {
        allow read, write: if isOwner(userId) && 
                           isValidDocumentSize();
      }
      
      /**
       * Consent history - immutable audit trail for GDPR
       */
      match /consent_history/{consentId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && 
                        isValidDocumentSize() &&
                        request.resource.data.keys().hasAll(['timestamp', 'version', 'permissions', 'granted']) &&
                        request.resource.data.timestamp is timestamp;
        // No updates or deletes - consent history is immutable
      }
      
      /**
       * Privacy audit log - immutable audit trail
       */
      match /privacy_audit/{auditId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && 
                        isValidDocumentSize() &&
                        request.resource.data.keys().hasAll(['timestamp', 'action', 'permission_used']) &&
                        request.resource.data.timestamp is timestamp;
        // No updates or deletes - audit logs are immutable
      }
      
      /**
       * User's relationship data - core private data
       */
      match /relationships/{relationshipId} {
        allow read, write: if isOwner(userId) && 
                           isValidDocumentSize();
        
        // Additional validation for person relationship creation/updates
        allow create, update: if isOwner(userId) && 
                               isValidPersonData() &&
                               isValidDocumentSize() &&
                               isWithinWriteRateLimit();
        
        /**
         * Interactions within relationships - nested under each relationship
         */
        match /interactions/{interactionId} {
          allow read, write: if isOwner(userId) && 
                             isValidDocumentSize();
          
          allow create, update: if isOwner(userId) && 
                                 isValidInteractionData() &&
                                 isValidDocumentSize() &&
                                 isWithinWriteRateLimit();
        }
        
        /**
         * Context nodes - AI-extracted or user-added contextual information
         * Requires AI processing consent for AI-generated content
         */
        match /context/{contextId} {
          allow read: if isOwner(userId);
          allow write: if isOwner(userId) && 
                         hasPrivacyPermission(userId, 'ai_processing') &&
                         isValidDocumentSize();
        }
      }
      
      /**
       * User's prompts and suggestions - AI-generated relationship prompts
       * Requires AI processing consent
       */
      match /prompts/{promptId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) && 
                       hasPrivacyPermission(userId, 'ai_processing') &&
                       isValidDocumentSize();
        
        allow create, update: if isOwner(userId) && 
                               hasPrivacyPermission(userId, 'ai_processing') &&
                               isValidPromptData() &&
                               isValidDocumentSize() &&
                               isWithinWriteRateLimit();
      }
      
      /**
       * User's timeline events - important dates and milestones
       */
      match /timeline/{eventId} {
        allow read, write: if isOwner(userId) && 
                           isValidDocumentSize();
      }
      
      /**
       * User's institutions - organizations and affiliations
       */
      match /institutions/{institutionId} {
        allow read, write: if isOwner(userId) && 
                           isValidDocumentSize();
      }
    }

    // ============================================================================
    // SHARED RELATIONSHIPS - Future feature for mutual relationship management
    // ============================================================================
    
    /**
     * Shared relationship documents - for future interconnectivity features
     * These allow multiple users to collaboratively manage relationship data
     * with explicit consent and permission controls
     */
    match /sharedRelationships/{sharedRelationshipId} {
      // Read access: user must be in participants list
      allow read: if isAuthorizedUser(resource.data.participants) &&
                  isValidDocumentSize();
      
      // Write access: user must be in participants list and have edit permissions
      allow write: if isAuthenticated() && 
                    request.auth.uid in resource.data.participants &&
                    (
                      // Check if user has edit permissions in the document
                      !resource.data.keys().hasAll(['permissions']) ||
                      !resource.data.permissions.keys().hasAll(['canEdit']) ||
                      request.auth.uid in resource.data.permissions.canEdit
                    ) &&
                    isValidDocumentSize() &&
                    isWithinWriteRateLimit();
      
      // Creation: user must be the creator and include themselves in participants
      allow create: if isAuthenticated() && 
                     request.auth.uid in request.resource.data.participants &&
                     request.resource.data.createdBy == request.auth.uid &&
                     isValidDocumentSize() &&
                     isWithinWriteRateLimit();
      
      /**
       * Shared memories and context within shared relationships
       */
      match /sharedContext/{contextId} {
        allow read: if isAuthenticated() && 
                    request.auth.uid in get(/databases/$(database)/documents/sharedRelationships/$(sharedRelationshipId)).data.participants;
        
        allow write: if isAuthenticated() && 
                      request.auth.uid in get(/databases/$(database)/documents/sharedRelationships/$(sharedRelationshipId)).data.participants &&
                      (
                        // Check edit permissions
                        request.auth.uid in get(/databases/$(database)/documents/sharedRelationships/$(sharedRelationshipId)).data.permissions.canEdit
                      ) &&
                      isValidDocumentSize() &&
                      isWithinWriteRateLimit();
      }
      
      /**
       * Invitation system for shared relationships
       */
      match /invitations/{invitationId} {
        // Invitations can be read by sender and recipient
        allow read: if isAuthenticated() && 
                    (request.auth.uid == resource.data.fromUserId || 
                     request.auth.uid == resource.data.toUserId);
        
        // Only sender can create invitations
        allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.fromUserId &&
                       isValidDocumentSize() &&
                       isWithinWriteRateLimit();
        
        // Only recipient can update (accept/decline)
        allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.toUserId &&
                       isValidDocumentSize();
      }
    }

    // ============================================================================
    // SYSTEM COLLECTIONS - Read-only reference data and configurations
    // ============================================================================
    
    /**
     * System configuration - read-only for all authenticated users
     * Contains app-wide settings, feature flags, etc.
     */
    match /systemConfig/{configId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side updates allowed
    }
    
    /**
     * Relationship templates and suggestions - read-only reference data
     */
    match /templates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side updates allowed
    }

    // ============================================================================
    // ANALYTICS AND LOGGING - Privacy-preserving usage analytics
    // ============================================================================
    
    /**
     * Anonymous usage analytics - no personal data, aggregated only
     */
    match /analytics/{analyticsId} {
      // Users can write anonymous usage data but not read others'
      allow create: if isAuthenticated() && 
                     !request.resource.data.keys().hasAny(['userId', 'email', 'personalData']) &&
                     isValidDocumentSize() &&
                     isWithinWriteRateLimit();
      
      allow read: if false; // No read access to analytics data
    }

    // ============================================================================
    // ADMIN COLLECTIONS - Restricted access for administrative functions
    // ============================================================================
    
    /**
     * Admin-only collections for system management
     * These should only be accessed via Cloud Functions with admin privileges
     */
    match /adminLogs/{logId} {
      allow read, write: if false; // No client access - server-side only
    }
    
    match /reports/{reportId} {
      allow read, write: if false; // No client access - server-side only
    }

    // ============================================================================
    // GDPR COMPLIANCE COLLECTIONS - Data export and deletion requests
    // ============================================================================
    
    /**
     * GDPR data export requests - users can request their data
     */
    match /data_export_requests/{requestId} {
      // Users can read their own export requests
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      
      // Users can create export requests for themselves
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['userId', 'timestamp', 'status']) &&
                      request.resource.data.timestamp is timestamp &&
                      isValidDocumentSize();
      
      // Only system can update status (via Cloud Functions)
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * GDPR data deletion requests - users can request data deletion
     */
    match /data_deletion_requests/{requestId} {
      // Users can read their own deletion requests
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      
      // Users can create deletion requests for themselves
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['userId', 'timestamp', 'status', 'reason']) &&
                      request.resource.data.timestamp is timestamp &&
                      isValidDocumentSize();
      
      // Only system can update status (via Cloud Functions)
      allow update: if false;
      allow delete: if false;
    }

    // ============================================================================
    // DEFAULT DENY - Explicitly deny access to any unmatched paths
    // ============================================================================
    
    /**
     * Default deny rule - any path not explicitly matched above is denied
     * This ensures security by default for any new collections added
     */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// ============================================================================
// RULE DOCUMENTATION AND MAINTENANCE NOTES
// ============================================================================

/*
SECURITY PRINCIPLES IMPLEMENTED:

1. **USER ISOLATION**: Each user can only access their own data under /users/{userId}/
2. **AUTHENTICATION REQUIRED**: All operations require valid Firebase Auth token
3. **INPUT VALIDATION**: All writes are validated for required fields and data types
4. **SIZE LIMITS**: Documents limited to 500KB to prevent abuse
5. **RATE LIMITING**: Basic write rate limiting (to be enhanced with Cloud Functions)
6. **EXPLICIT PERMISSIONS**: Shared resources require explicit permission grants
7. **DEFAULT DENY**: Any unmatched path is denied by default

FUTURE EXTENSIBILITY:

1. **SHARED RELATIONSHIPS**: Framework ready for mutual relationship features
2. **INVITATION SYSTEM**: Built-in support for relationship sharing invitations
3. **ROLE-BASED ACCESS**: Granular permissions for different sharing levels
4. **MODULAR STRUCTURE**: Easy to add new collections while maintaining security

MAINTENANCE CHECKLIST:

- [ ] Test all rules with Firebase Rules Unit Testing
- [ ] Validate performance with large datasets
- [ ] Review security with each new feature addition
- [ ] Update rate limiting when Cloud Functions are implemented
- [ ] Monitor rule usage and optimize based on query patterns

COMPLIANCE FEATURES:

- Data isolation for GDPR compliance
- No cross-user data access
- Anonymous analytics collection
- Explicit consent model for data sharing
- User-controlled data deletion capabilities

VERSION HISTORY:
- v1.0: Initial rules with user isolation and basic validation
- v1.1: Added shared relationship framework for future features
- v1.2: Enhanced validation and rate limiting
*/